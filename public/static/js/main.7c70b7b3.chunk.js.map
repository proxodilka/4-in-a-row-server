{"version":3,"sources":["components/game/game-context.js","components/cell/cell.js","components/column/column.js","components/table-header/table-header.js","components/table/table.js","components/game-handler/game-handler-context.js","components/multiplayer/multiplayer.js","components/ai/ai.js","components/search-filter/search-filter.js","components/game-header/game-header.js","hooks/onServer.js","components/game-handler/game-class.js","hooks/onLocal.js","components/game-handler/game-handler.js","components/game/game.js","components/game-over/game-over.js","components/room-unit/room-unit.js","components/loader/loader.js","components/rooms-list/rooms-list.js","components/setup/setup.js","App.js","index.js","components/lib/stuff.js","components/game-handler/field.js"],"names":["GameContext","React","createContext","color","Cell","val","pulse","circleStyle","backgroundColor","Math","abs","opacity","classList","className","style","Column","data","columnAction","id","cellsToPulse","onClick","onMouseEnter","onMouseLeave","onTouchStart","map","x","i","key","toString","findIndex","TableHeader","curePlayerText","winner","currentPlayer","restart","exitGame","Table","field","gameState","isFieldBlocked","tableFieldClassList","console","log","marginBottom","cells","filter","gameHandlerContext","Player","winLen","errMsg","Game","N","M","req","handleErrors","setGonnaLeave","context","useContext","GameHandlerContext","playerInfo","players","userName","role","gameInfo","useServer","controls","socket","roomId","roomInfo","useState","Array","fill","gameStatus","curePlayer","winState","isWin","game","setGame","useEffect","callAgain","sendToServer","playerName","uid","setIsFieldBlocked","gonnaLeave","handleData","lastMoveInitiator","onError","initiator","moveInfo","columnId","lastColumn","action","lastAction","to","pathname","state","args","value","pos","y","getInsertPosition","changeArrayElem","IsWin","TLHandler","start","maxTime","getRandom","min","max","floor","random","rateField","player","rating","isWinObj","checkMayWin","length","pow","getWays","res","forEach","arr","tmp","array","ind","a","push","ways","go","deepLvl","column","optimalContainer","tmpRes","col","turn","table","_winLen","Date","now","SearchFilter","filters","filterChange","props","options","find","active","onChange","this","el","title","Component","GameHeader","launchButtonContent","onGameModeChange","gameModes","onGameStart","onPlayerNameChange","selectorRootClassList","useRef","launchButtonClassList","flexShrink","minWidth","type","e","target","saveName","flexBasis","handleDataCallback","current","emit","ok","reason","on","removeAllListeners","addr","Field","require","generateId","substr","initValue","creator","settings","defaultSettings","name","spectators","lastActionEvent","eventHandler","_execEvent","getInfo","splice","reset","specInd","getField","newWinState","move","indexes","newStatus","eventName","eventListener","listener","event","eventListeners","ai","AiTurn","checkWin","useGameHandler","getGame","gameMode","gameControl","GameControl","joinPlayer","handleCall","alias","handleGame","params","aiMove","route","buildConfig","fieldInfo","user","RowsNumber","ColumnNumber","WinLen","config","GameHandler","Provider","TryToStartGame","undefined","location","GameOver","RoomUnit","userInfo","onRoomDelete","onRoomEnter","stopPropagation","class","Loader","ErrorMessage","text","textAlign","RoomsList","roomList","setRoomList","connectionState","setConnectionState","newRoomName","setNewRoomName","updRooms","newRoomList","reverse","error","roomCreated","err","onSubmit","preventDefault","roomName","placeholder","io","window","origin","useLocalStorage","initialValue","localStorage","getItem","JSON","parse","setValue","saveValue","setItem","stringify","Setup","setGameModes","setGameMode","gameStarted","setGameStarted","setRoomInfo","setUserInfo","startGame","App","path","exact","component","Multiplayer","ReactDOM","render","document","getElementById","insertInColumn","MultiEqual","values","j","generateIndexes","stat","end","getDiagonals","direction","lowerBound","upperBound","src","justCheckWin","draw","inRow","entries","slice","norm","getEmptyField"],"mappings":"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","file":"static/js/main.7c70b7b3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst GameContext = React.createContext({});\r\n\r\nexport default GameContext;","import React from 'react';\r\nimport {propTypes} from 'prop-types';\r\nimport './cell.css';\r\n\r\nconst color = ['transparent','red','orange'];\r\n\r\nconst Cell = ({val, pulse=false})=>{\r\n\r\n    const circleStyle = {\r\n        backgroundColor: color[Math.abs(val)],\r\n        opacity: val<0?0.3:1\r\n    }\r\n\r\n    let classList = \"circle\";\r\n    if (pulse) classList+=\" pulseAnimation\";\r\n\r\n    return (\r\n        <div className=\"cell\">\r\n            <div style={circleStyle} className={classList}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport './column.css';\r\nimport Cell from '../cell/cell.js';\r\n\r\nconst Column = ({data, columnAction, id, cellsToPulse})=>{\r\n    return(\r\n        <div onClick={ ()=>columnAction(id, 'action') } onMouseEnter={ ()=>columnAction(id, 'hint') } \r\n             onMouseLeave={()=>columnAction(id, 'hideHint')} onTouchStart={ ()=>columnAction(id, 'hint') } className='column'>\r\n            {data.map( (x,i)=><Cell key={id.toString()+i.toString()} val={x}\r\n                                    pulse={cellsToPulse.findIndex((x)=>x[1]===i)!==-1}/>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Column\r\n","import React from 'react';\r\nimport './table-header.css';\r\n\r\nconst TableHeader = ({winner, currentPlayer, restart, exitGame, style})=>{\r\n    let curePlayerText;\r\n\r\n    // const getWinText = (text)=>{\r\n    //     return (text);\r\n    // }\r\n\r\n    switch (winner){\r\n        case -1: curePlayerText=`Сейчас ходит ${currentPlayer}`; break;\r\n        case 0: curePlayerText='Ничья!'; break; //lose\r\n        default: curePlayerText=`Победил ${currentPlayer}`;\r\n    }\r\n    return(\r\n        <div style={style} className=\"tableHeader\">\r\n            <div className=\"curePlayerText\">{curePlayerText}</div>\r\n            <div className=\"buttonsContainer\">\r\n                <button onClick={restart} className=\"btn btn-outline-primary\"><i className=\"fa fa-repeat\"></i></button>\r\n                <button onClick={exitGame} className=\"btn btn-danger\"><i className=\"fa fa-times\"></i></button>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TableHeader;","import React from 'react';\r\nimport './table.css';\r\nimport Column from '../column/column.js';\r\nimport TableHeader from '../table-header/table-header.js';\r\n\r\nconst Table = ({currentPlayer, field, columnAction, cellsToPulse, gameState, exitGame, isFieldBlocked, winner, restart})=>{\r\n\r\n    let tableFieldClassList=\"tableField\";\r\n    let tableRootClassList=\"tableRoot\";\r\n    console.log('field', field);\r\n\r\n    // switch (gameState){\r\n    //     case \"setup\": tableRootClassList+=\" disabled\"; break;\r\n    //     case \"ended\": tableFieldClassList+=\" notActive\";\r\n    //     default:\r\n    // }\r\n\r\n    if (gameState===\"setup\" || gameState===\"waiting for players\"){\r\n        tableFieldClassList+=\" disabled\";\r\n    }\r\n    else if (gameState===\"ended\" || isFieldBlocked){\r\n        tableFieldClassList+=\" notActive\";\r\n    }\r\n\r\n    return (\r\n        <div className={tableRootClassList}>\r\n            <TableHeader currentPlayer={currentPlayer} exitGame={exitGame}\r\n                         winner={winner} restart={restart} style={{marginBottom: \"5px\"}}/>\r\n            <div className={tableFieldClassList}>\r\n                {field.map( (x, i)=>{\r\n                    const cells = cellsToPulse.filter((x)=>x[0]===i);\r\n                    return (\r\n                        <Column key={i} id={i} columnAction={columnAction} data={x} cellsToPulse={cells}/>\r\n                    );\r\n                } )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\n\r\nconst gameHandlerContext = React.createContext({});\r\n\r\nexport default gameHandlerContext;","import React, { useState, useEffect, useRef, useContext } from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport './multiplayer.css';\n\n\nimport Table from '../table/table.js';\nimport {getInsertPosition, changeArrayElem} from '../lib/stuff.js';\nimport GameHandlerContext from '../game-handler/game-handler-context';\n\nlet errMsg = 'no errors';\n\nconst getEmptyField = (N,M)=>{\n    return Array(M).fill(Array(N).fill(0));\n}\n\nconst error = ()=>{\n    return <Redirect to={{\n        pathname: '/',\n        state: {\n            errMsg\n        }\n    }}/>\n}\n\nconst Game = ()=>{\n\n    const handleData = (data, callAgain=false)=>{\n        console.log('data', data, uid);\n        const {field, gameStatus, curePlayer, winState, players, lastMoveInitiator} = data;\n        \n        //console.log(`${players[curePlayer-1].id} == ${uid} && ${gameStatus}`);\n        console.log('game', game, field);\n        console.log('initiator', lastMoveInitiator, uid);\n\n        setGame({\n            field: lastMoveInitiator.id===uid?game.field:field,\n            gameStatus,\n            curePlayer,\n            winState,\n            players,\n            callAgain,\n        });\n\n        \n        if (role==='player' && players[curePlayer-1] && players[curePlayer-1].id==uid && gameStatus=='is on'){\n            setIsFieldBlocked(false);\n        }\n    }\n\n    const exitGame = (req)=>{\n        errMsg = 'exiting with no errors';\n        handleErrors(req);\n        setGonnaLeave(true);\n    }\n\n    const context = useContext(GameHandlerContext);\n    const {playerInfo: {id, players, userName}, gameInfo: {role}, controls: {useServer}, socket, roomInfo: {roomId}} = context;\n\n    const [game, setGame] = useState({\n        field: getEmptyField(7,6),\n        gameStatus: 'connecting to the server...',\n        curePlayer: 0,\n        winState: {\n            isWin: false,\n            winner: -1,\n            cellsToPulse: []\n        },\n        players,\n    })\n\n    useEffect(()=>{\n        if (game.callAgain){\n            setGame({...game, callAgain: false});\n            sendToServer('calling');\n        }\n    }, [game]);\n\n    const [playerName] = useState(userName)\n    const [uid] = useState(id);\n    const [isFieldBlocked, setIsFieldBlocked] = useState(true);\n    const [gonnaLeave, setGonnaLeave] = useState(false);\n    const sendToServer = useServer({\n        socket,\n        playerName,\n        handleData,\n        onError: exitGame, \n        roomId,\n        role,\n    });\n\n    const curePlayerString = ()=>{\n        return game.players[game.curePlayer-1]?game.players[game.curePlayer-1].playerName:'Unknown player';\n    }\n\n    const clickHandler = (...args)=>{ //columnId, action\n        const [columnId, action] = args;\n\n        let value=0;\n        switch (action){\n            case 'action': value=game.curePlayer; break;\n            case 'hint': value=-game.curePlayer; break;\n            case 'hidehint': value=0; break;\n            default: value=0;\n        }\n\n        const pos = {x: columnId, y: getInsertPosition(game.field[columnId])};\n        if (pos.y<0)\n            return;\n\n        setGame({\n            ...game,\n            field: changeArrayElem(game.field, pos, value),\n            curePlayer: action=='action'?game.curePlayer==1?2:1:game.curePlayer,\n            lastAction: action,\n            lastColumn: columnId,\n            initiator: 'player',\n        });\n\n        if (action!=='action')\n            return;\n\n        setIsFieldBlocked(true);\n        \n    }\n\n    useEffect(()=>{\n        if (game.initiator==='player'){\n            sendToServer('move', {moveInfo: {columnId: game.lastColumn, action: game.lastAction}, roomInfo: {roomId}});\n        }\n    }, [game])\n\n    const handleErrors = (req)=>{\n        if (req){\n            errMsg = `${req} | ${0}`;\n        }\n    }\n\n    const restartGame = ()=>{\n        if (role!=='player')\n            return;\n        sendToServer('restart', {id: uid, roomId});\n    }\n    \n    return (\n        <div className=\"GameRoot\">\n            {gonnaLeave?error():null}            \n            <Table columnAction={clickHandler} winner={game.winState.winner} \n                   currentPlayer={curePlayerString()} field={game.field}\n                   cellsToPulse={game.winState.cellsToPulse} gameState={game.gameStatus}\n                   exitGame={exitGame} isFieldBlocked={isFieldBlocked}\n                   restart={restartGame} />\n            <div className=\"status\">{game.gameStatus} {role==='spectator'?' | You are in spectator mode':null}</div>\n        </div>\n    );\n}\n\nexport default Game;\n","let Table = [];\r\nlet IsWin = ()=>1;\r\nlet Player;\r\nlet winLen;\r\n\r\nconst maxDeepLvl = 1;\r\n\r\nconst TLHandler = {\r\n    start: 0,\r\n    maxTime: 2000\r\n}\r\n\r\nconst INF = 10e30;\r\n\r\nconst getRandom = (min, max)=>{\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nconst getInsertPosition = (array)=>{\r\n    const ind = array.findIndex((a)=>a>0);\r\n    return (ind===-1?array.length:ind)-1;\r\n}\r\n\r\nconst rateField = (player)=>{\r\n    let rating = 0;\r\n    let isWinObj = IsWin(Table, winLen);\r\n\r\n    if (isWinObj.isWin){\r\n        if (isWinObj.isWin===\"draw\")\r\n            return 0;\r\n        if (isWinObj.winner===player)\r\n            return INF;\r\n        return -INF;\r\n    }\r\n\r\n    if (checkMayWin(player===1?2:1)>=0){\r\n        return -INF;\r\n    }  \r\n        \r\n\r\n    for(let i=2; i<=winLen; i++){\r\n        isWinObj = IsWin(Table, i, 0);\r\n        rating+= isWinObj.filter((x)=>x.winner===player).length*Math.pow(10, i*5);\r\n        rating-= isWinObj.filter((x)=>x.winner!==player).length*Math.pow(10, i);\r\n    }\r\n\r\n    //console.log(rating);\r\n    return rating;\r\n}\r\n\r\nconst getWays = ()=>{\r\n    const res = [];\r\n    Table.forEach((arr, i)=>{\r\n        let tmp = getInsertPosition(arr);\r\n        if (tmp<0)\r\n            return;\r\n        res.push([i, tmp]);\r\n    })\r\n    return res;\r\n}\r\n\r\n// const states = {};\r\n\r\nconst checkMayWin = (player)=>{\r\n    let ways = getWays();\r\n\r\n    for(let x of ways){\r\n        Table[x[0]][x[1]]=player;\r\n        if (IsWin(Table,winLen).isWin){\r\n            return x[0];\r\n        }\r\n        Table[x[0]][x[1]]=0;\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\nconst go = (player, deepLvl=0)=>{\r\n    if (deepLvl>=maxDeepLvl)\r\n        return rateField(Player);\r\n    let res=-2*INF;\r\n    let column = -1;\r\n\r\n    let ways = getWays(Table);\r\n\r\n    let optimalContainer = [];\r\n\r\n    for(let x of ways){\r\n        Table[x[0]][x[1]]=player;\r\n        let tmpRes = go(player===1?2:1, deepLvl+1);\r\n        if (res<tmpRes){\r\n            optimalContainer = [];\r\n            res = tmpRes;\r\n            column = x[0];\r\n            optimalContainer.push({val: res, col: column});\r\n        }\r\n        if (res===tmpRes){\r\n            optimalContainer.push({val: res, col: x[0]});\r\n        }\r\n        Table[x[0]][x[1]]=0;\r\n    }\r\n\r\n    if (!deepLvl)\r\n        return optimalContainer[getRandom(0, optimalContainer.length-1)].col;\r\n    return res;\r\n}\r\n\r\nconst turn = (table, player, isWin, _winLen=4)=>{\r\n    Table = table;\r\n    IsWin = isWin;\r\n    Player = player;\r\n    winLen = _winLen;\r\n\r\n    TLHandler.start = Date.now();\r\n    \r\n    let tmp = checkMayWin(player);\r\n    if (tmp>=0)\r\n        return tmp;\r\n    return go(player);   \r\n}\r\n\r\nexport default turn;","import React from 'react';\r\nimport './search-filter.css';\r\n\r\nclass SearchFilter extends React.Component{\r\n\r\n\r\n    state = {\r\n        filters: [],\r\n    }\r\n\r\n    filterChange = (id)=>{\r\n        if ((this.props.options.find((x)=>x.active) || {id:-1}).id===id) //если кликнули по активному\r\n            return;\r\n\r\n        this.props.onChange(id)\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div style={this.props.style} className=\"SF-buttonsContainer\">\r\n                {this.props.options.map((el, ind, arr)=>{\r\n                    let classList = \"btn\";\r\n\r\n                    if (el.active) classList+=\" btn-primary\";\r\n                    else classList+=\" btn-outline-secondary\";\r\n\r\n                    if (!ind) classList+=\" first\";\r\n\r\n                    if (ind===arr.length-1) classList+=\" last\";\r\n\r\n                    return(\r\n                        <button key={el.id} className={classList} onClick={()=>this.filterChange(el.id)}>{el.title}</button>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchFilter;","import React, {useRef} from 'react';\r\nimport './game-header.css';\r\n\r\nimport SearchFilter from '../search-filter/search-filter.js';\r\n\r\nconst GameHeader = ({onGameModeChange, gameModes, gameState=\"setup\", onGameStart, userName, onPlayerNameChange})=>{\r\n    const playerNameInput = useRef();\r\n\r\n\r\n    let selectorRootClassList = \"selectorRoot\";\r\n    let launchButtonClassList = \"btn\";\r\n    let launchButtonContent;\r\n    if (gameState===\"ended\") {\r\n        launchButtonClassList+=\" btn-secondary\";\r\n        launchButtonContent = <span><i className=\"fa fa-repeat\"></i> Начать заново</span>\r\n    }\r\n    else if (gameState===\"setup\"){\r\n        launchButtonClassList+=\" btn-success\";\r\n        launchButtonContent = <span><i className=\"fa fa-play\"></i> Играть</span>\r\n    }\r\n    if (gameState===\"is on\"){\r\n        selectorRootClassList+=\" disabled\";\r\n        launchButtonClassList+=\" btn-secondary\";\r\n        launchButtonContent = <span><i className=\"fa fa-repeat\"></i> Начать заново</span>\r\n    }\r\n\r\n    const saveName = (e)=>{\r\n        onPlayerNameChange(e.target.value);\r\n    }\r\n\r\n    return(\r\n        <div className=\"headerRoot mb-3\">\r\n            <div className=\"titleRoot\">\r\n                <h1 style={{flexShrink: 0}}>4 in a row</h1> \r\n                <input style={{minWidth: 0}} type='text' className=\"playerName\" value={userName} onChange={(e)=>saveName(e)}/>\r\n            </div>\r\n            <div className=\"mb-1 launchRoot\">\r\n                <button onClick={onGameStart} className={launchButtonClassList}>{launchButtonContent}</button>\r\n            </div>\r\n            <div className={selectorRootClassList+\" mb-1\"}>\r\n                <SearchFilter onChange={onGameModeChange} options={gameModes} style={{flexBasis: \"100%\"}}/>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameHeader;","import React, { useState, useEffect, useRef } from 'react';\r\n\r\nconst useServer = ({socket, playerName, handleData, onError, roomId, role})=>{\r\n\r\n    const handleDataCallback = useRef();\r\n\r\n    useEffect(()=>{\r\n        handleDataCallback.current = handleData;\r\n    })\r\n\r\n    useEffect(()=>{\r\n        socket.emit('join-room', {roomId, playerName, role}, (res)=>{\r\n            console.log('join-room', onError);\r\n            if (!res.ok){\r\n                onError(res.reason);\r\n                return;\r\n            }\r\n            //socket.emit('get-room-data', {playerId: socket.id, roomId}, handleDataCallback.current);\r\n        });\r\n\r\n        socket.on('field-updated', (data)=>handleDataCallback.current(data));\r\n        //socket.on('field-updated', ()=>console.log('testObj', testObj));\r\n        socket.on('kick-from-room', onError)\r\n\r\n\r\n        socket.on('disconnect', ()=>{\r\n            onError('connection lost')\r\n        })\r\n\r\n        return ()=>{\r\n            socket.emit('leave-room', {id: socket.id, roomId});\r\n\r\n            socket.removeAllListeners('field-updated');\r\n            socket.removeAllListeners('kick-from-room');\r\n        }\r\n    }, []);\r\n\r\n    const onPost = (addr, data)=>{\r\n        socket.emit(addr, data);\r\n    }\r\n\r\n    return onPost;\r\n    \r\n}\r\n\r\nexport default useServer;","const {Field} = require('./field');\r\n\r\nconst generateId = ()=>Math.random().toString(36).substr(2, 9);\r\n\r\nconst initValue = {\r\n    field: new Field(),\r\n    gameStatus: 'waiting for players',\r\n    curePlayer: 1,\r\n    players: [],\r\n    winState: {\r\n        isWin: false,\r\n        winner: -1,\r\n        cellsToPulse: []\r\n    },\r\n    creator: '__admin',\r\n}\r\n\r\nclass Game{\r\n    constructor(settings = {}){\r\n        const defaultSettings = {\r\n            ...initValue,\r\n            ...settings\r\n        };\r\n\r\n        this.id = generateId();\r\n        this.name = defaultSettings.name;\r\n        this.field = new Field();\r\n        this.gameStatus = defaultSettings.gameStatus;\r\n        this.curePlayer = defaultSettings.curePlayer;\r\n        this.players = [];\r\n        this.spectators = [];\r\n        this.creator = defaultSettings.creator;\r\n        this.lastMoveInitiator = 0;\r\n        this.lastActionEvent = Date.now();\r\n        this.winState = {\r\n            isWin: false,\r\n            winner: -1,\r\n            cellsToPulse: []\r\n        };\r\n        this.eventHandler = [];\r\n    }\r\n\r\n    joinPlayer({id, playerName, role}){\r\n        console.log('trying to join player');\r\n        switch (role){\r\n            case 'player':{\r\n                if (this.players.length>=2)\r\n                    return {\r\n                        ok: false,\r\n                        reason: 'too many players in the room'\r\n                    }\r\n                this.players.push({id, playerName});\r\n\r\n                if (this.players.length==2){\r\n                    this.gameStatus='is on';\r\n                }\r\n                break;\r\n            }\r\n\r\n            case 'spectator':{\r\n                this.spectators.push({id, playerName});\r\n                break;\r\n            }\r\n        }\r\n        \r\n        this._execEvent('game-updated', this.getInfo());\r\n        this._execEvent('status-changed', this.gameStatus);\r\n        return {ok: true};\r\n    }\r\n\r\n    leavePlayer({id}){\r\n        console.log('trying to kick', id, this.players);\r\n        const ind = this.players.findIndex(x=>x.id==id);\r\n        if (ind==-1){\r\n            const specInd = this.spectators.findIndex(x=>x.id==id);\r\n            if (specInd==-1)\r\n                return;\r\n            this.spectators.splice(specInd, 1);\r\n            return;\r\n        }\r\n        this.gameStatus = 'on delete';\r\n        this._execEvent('room-on-delete-now');\r\n        this.players.splice(ind, 1);\r\n        console.log('/leaves', this.players);\r\n        if (this.players.length==0){\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    setCurePlayer(value){\r\n        this.curePlayer = value;\r\n        this._execEvent('game-updated', this.getInfo());\r\n    }\r\n\r\n    setField(value){\r\n        this.field = value;\r\n        this._execEvent('game-updated', this.getInfo());\r\n    }\r\n\r\n    getInfo(){\r\n        return {\r\n            id: this.id,\r\n            field: this.field.getField(),\r\n            gameStatus: this.gameStatus,\r\n            curePlayer: this.curePlayer,\r\n            players: this.players,\r\n            winState: this.winState,\r\n            lastMoveInitiator: this.lastMoveInitiator,\r\n        }\r\n    }\r\n\r\n    move(columnId, action){\r\n\r\n        let value=0;\r\n\r\n        switch (action){\r\n            case 'action': value=this.curePlayer; break;\r\n            case 'hint': value=-this.curePlayer; break;\r\n            case 'hidehint': value=0; break;\r\n            default: value=0;\r\n        }\r\n\r\n        const newWinState = this.field.move(columnId, value);\r\n        this.lastMoveInitiator = this.players[this.curePlayer-1];\r\n        console.log(newWinState);\r\n        this.winState = {\r\n            ...this.winState,\r\n            ...newWinState,\r\n            cellsToPulse: newWinState.indexes || [],\r\n        }\r\n\r\n        if (!this.winState.isWin && action==='action'){\r\n            console.log('setting new player');\r\n            this.curePlayer=this.curePlayer==1?2:1;\r\n        }\r\n        else if (this.winState.isWin){\r\n            this.gameStatus = 'ended';\r\n            this._execEvent('status-changed', this.gameStatus);\r\n        }\r\n        this._execEvent('game-updated', this.getInfo());\r\n    }\r\n\r\n    restart(newStatus='is on'){\r\n        console.log('restarting');\r\n        this.field.reset();\r\n        this.gameStatus = newStatus;\r\n        this.curePlayer = initValue.curePlayer;\r\n        //this.players = initValue.players;\r\n        this.winState = initValue.winState;\r\n        this._execEvent('game-updated', this.getInfo());\r\n        this._execEvent('status-changed', this.gameStatus);\r\n        console.log(this.gameStatus);\r\n    }\r\n\r\n    reset(){\r\n        this.restart(initValue.gameStatus);\r\n        this._execEvent('status-changed', this.gameStatus);\r\n    }\r\n\r\n    on(eventName, eventListener){\r\n        //'rooms-updated'\r\n        //'game-updated'\r\n        this.eventHandler[eventName] = this.eventHandler[eventName] || [];\r\n        this.eventHandler[eventName].push(eventListener);\r\n        console.log('just pushed event|game', eventName, this.eventHandler, this.id);\r\n\r\n    }\r\n\r\n    removeListener(eventName, listener){\r\n        switch (typeof(listener)){\r\n            case 'string':{\r\n\r\n                break;\r\n            }\r\n\r\n            case 'function':{\r\n\r\n                break;\r\n            }\r\n            \r\n            default:{\r\n                return;\r\n            }\r\n        }\r\n        if (typeof listener==='string'){\r\n\r\n        }\r\n    }\r\n\r\n    _execEvent(eventName, ...args){\r\n        const event = this.eventHandler[eventName];\r\n        if (!event){\r\n            return;\r\n        }\r\n\r\n\r\n        const eventListeners = event;\r\n        this.lastActionEvent = Date.now();\r\n        console.log('executing event', eventName, eventListeners, this.eventHandler);\r\n        for(let event of eventListeners || []){\r\n            event(...args);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import React, {useEffect, useRef} from 'react';\r\nimport AiTurn from '../components/ai/ai';\r\nimport {checkWin, insertInColumn} from '../components/lib/stuff.js';\r\nimport GameControl from '../components/game-handler/game-class';\r\n\r\nconst useGameHandler = ({handleData, getGame}, {playerInfo: {players}, gameInfo: {gameMode}})=>{\r\n\r\n    const gameControl = useRef(new GameControl()).current;\r\n    useEffect(()=>{\r\n        gameControl.joinPlayer({...players[0], role: 'player'});\r\n        gameControl.joinPlayer({...players[1], role: 'player'});\r\n        handleData(gameControl.getInfo(), true);\r\n    }, []);\r\n\r\n    const handleRoutes = (route, params)=>{\r\n        switch (route){\r\n            case 'move': handleGame(params); break;\r\n            case 'restart': restart(params); break; \r\n            case 'calling': handleCall(); break;\r\n        }\r\n    }\r\n\r\n    const handleCall = ()=>{\r\n        if (gameControl.winState.isWin){\r\n            return;\r\n        }\r\n        if ((gameMode.alias[gameControl.curePlayer-1])=='ai'){\r\n            handleGame({moveInfo: {columnId: -1, action: 'action'}});\r\n        }\r\n    }\r\n\r\n    const restart = (params)=>{\r\n        gameControl.restart();\r\n        handleData(gameControl.getInfo(), true);\r\n    }\r\n\r\n    const handleGame = ({moveInfo: {columnId, action}})=>{\r\n        if (action!='action')\r\n            return;\r\n        if (columnId>=0) gameControl.move(columnId, action);\r\n        switch (gameMode.alias[gameControl.curePlayer-1]){\r\n            case 'player': {\r\n                handleData(gameControl.getInfo(), true);\r\n                break;\r\n            }\r\n            case 'ai': {\r\n                const aiMove = ai(gameControl.getInfo());\r\n                gameControl.move(aiMove, 'action');\r\n                handleData(gameControl.getInfo(), true);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return handleRoutes;\r\n}\r\n\r\nconst ai = ({field, curePlayer})=>{\r\n    console.log('ai', curePlayer, field);\r\n    return AiTurn(field.map((arr)=>[...arr]), curePlayer, checkWin);\r\n}\r\n\r\n\r\nexport default useGameHandler;","import React, { useState, useEffect, useContext, useRef } from 'react';\r\nimport Game from '../multiplayer/multiplayer';\r\nimport GameContext from '../game/game-context';\r\nimport GameHandlerContext from './game-handler-context';\r\nimport useServer from '../../hooks/onServer';\r\nimport useGameHandler from '../../hooks/onLocal';\r\n\r\nconst GameHandler = ()=>{\r\n    const context = useContext(GameContext);\r\n    const config = buildConfig(context);\r\n\r\n    return (\r\n        <GameHandlerContext.Provider value={config}>\r\n            <Game />\r\n        </GameHandlerContext.Provider>\r\n    );\r\n\r\n}\r\n\r\nconst buildConfig = (data)=>{\r\n    const {fieldInfo, gameInfo, user, socket, roomInfo} = data;\r\n    const {RowsNumber, ColumnNumber, WinLen} = fieldInfo;\r\n    let {gameMode} = gameInfo;\r\n    let {userName} = user;\r\n    let {id, alias, role} = gameMode;\r\n\r\n    const players = [];\r\n    let uid;\r\n    if (gameMode.id!=='multiplayer'){\r\n        role='player';\r\n        id = 1;\r\n\r\n        switch (gameMode.alias[0]){\r\n            case 'player': players.push({id: 1, playerName: 'Player 1'}); break;\r\n            case 'ai': players.push({id: 2, playerName: 'AI 1'}); break;\r\n            default: players.push({id: 1, playerName: 'unknown player'});\r\n        }\r\n\r\n        switch (gameMode.alias[1]){\r\n            case 'player': players.push({id: 1, playerName: 'Player 2'}); break;\r\n            case 'ai': players.push({id: 2, playerName: 'AI 2'}); break;\r\n            default: players.push({id: 1, playerName: 'unknown player'});\r\n        }\r\n\r\n    }\r\n    else{\r\n        id = socket.id;\r\n    }\r\n\r\n    const config = {\r\n        playerInfo: {\r\n            id,\r\n            players,\r\n            userName, \r\n        },\r\n\r\n        gameInfo: {\r\n            role,\r\n            gameMode,\r\n        },\r\n        roomInfo: {\r\n            roomId: roomInfo || 1,\r\n        },\r\n        socket,\r\n    }\r\n\r\n    return {\r\n        ...config,\r\n        controls: {\r\n            useServer: gameMode.id=='multiplayer'?useServer:(data)=>useGameHandler(data, config),\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default GameHandler;","import React, { useState, useEffect } from 'react';\nimport {Redirect} from 'react-router-dom';\nimport axios from 'axios';\nimport GameContext from './game-context';\nimport './game.css';\n\n\nimport Table from '../table/table.js';\nimport Multiplayer from '../multiplayer/multiplayer';\nimport AiTurn from '../ai/ai.js';\nimport {checkWin} from '../lib/stuff.js';\nimport GameHeader from '../game-header/game-header.js';\nimport GameHandler from '../game-handler/game-handler';\n\n\nconst TryToStartGame = (props)=>{\n\n    if (props.location.state===undefined){\n        return <Redirect to='/' />\n    }\n    console.log('interface');\n    // if (props.location.state.gameInfo.gameMode.alias[1]=='web')\n    //     return <Multiplayer state={props.location.state} />\n    // return <Game state={props.location.state} />\n\n    return(\n        <GameContext.Provider value={props.location.state}>\n            <GameHandler />\n        </GameContext.Provider>\n    );\n    \n}\n\nconst Game = (props)=>{\n\n    const {fieldInfo, gameInfo} = props.state;\n    const {RowsNumber, ColumnNumber, WinLen} = fieldInfo;\n    const {gameMode} = gameInfo;\n\n    const getEmptyField = (N,M)=>{\n        return Array(M).fill(Array(N).fill(0));\n    }\n\n    const getInsertPosition = (array)=>{\n        const ind = array.findIndex((a)=>a>0);\n        return (ind===-1?array.length:ind)-1;\n    }\n\n    const initialGameFieldState = {\n        field: getEmptyField(RowsNumber, ColumnNumber),\n        lastAction: 'none',\n        lastColumn: -1,\n        lastHoverColumn: -1\n    };\n\n    \n    const [isFieldBlocked, setFieldBlock] = useState(true);\n    const [winState, setWinState] = useState({\n        cellsToPulse: [],\n        winner: -1 // -1 = игра ещё идёт, 0 = ничья, >0 = номер выигравшего игрока\n    }); \n    const [gameField, setGameFieldState] = useState(initialGameFieldState);\n    const [gameState, setGameState] = useState(\"is on\");\n    const [curePlayer, setCurePlayer] = useState(1);\n    const [gonnaLeave, setGonnaLeave] = useState(false);\n\n    useEffect(()=>{\n        if (gameState===\"is on\")\n            getNextTurn();\n    },[gameState]);\n\n    useEffect(()=>{\n        if (gameField.lastAction!=='action')\n            return;\n        const win = checkWin(gameField.field, WinLen);\n        if (!win.isWin){\n            nextPlayerTurn();\n        }   \n        else{\n            endGame(win);\n        }\n    }, [gameField]);\n\n    const init = ()=>{\n        setWinState({\n            cellsToPulse: [],\n            winner: -1\n        });\n        setCurePlayer(1);\n        setGameFieldState(initialGameFieldState);\n    }\n\n    const startGame = ()=>{\n        init();\n        setGameState(\"is on\");\n    }\n\n    const toggleGameState = ()=>{\n        startGame();\n    }\n\n    const exitGame = ()=>{\n        init();\n        setGameState(\"setup\");\n        setGonnaLeave(true);\n    }\n\n    const norm = (x)=>{\n        return x<0?0:x;\n    }\n\n    const changeArrayElem = (array, pos, value)=>{\n        return array.map((arr, i)=>{\n            return arr.map((x, j)=>{\n                return i===pos.x && j===pos.y?value:norm(x);\n            });\n        })\n    }\n\n    const clickHandler = (...args)=>{\n        move(...args);\n    }\n\n    const move = (columnId, action, useEff=0)=>{\n        const insertPos = {x: columnId, y: getInsertPosition(gameField.field[columnId])};\n        if (insertPos.y<0){\n            return;\n        }\n        if (gameField.field[insertPos.x][insertPos.y]>0 && action==='hideHint'){\n            return;\n        }\n        \n        let fieldValue;\n\n        switch(action){\n            case 'action': fieldValue=curePlayer; break;\n            case 'hint' : fieldValue=-curePlayer; break;\n            case 'hideHint' : fieldValue=0; break;\n            default: fieldValue=0;\n        }\n        setGameFieldState({\n                field: changeArrayElem(gameField.field, insertPos, fieldValue),\n                lastAction: action,\n                lastColumn: action==='hint'?columnId:gameField.lastColumn,\n                lastActionColumn: action==='action'?columnId:gameField.lastAction\n            }\n        );\n    }\n\n    const endGame = ({winner, indexes})=>{\n        setGameState(\"ended\");\n        setWinState({\n            cellsToPulse: indexes,\n            winner: winner\n        })\n    }\n\n    const nextPlayerTurn = ()=>{\n        setCurePlayer(curePlayer===1?2:1);\n    }\n\n\n    const getNextTurn = ()=>{\n        if (gameState!==\"is on\"){\n            return;\n        }\n        switch (gameMode.alias[curePlayer-1]){\n            case 'ai':{\n                setFieldBlock(true);\n                move(ai(), 'action');\n                break;\n            }\n            case 'player':{\n                if (gameField.lastColumn>=0) move(gameField.lastColumn, 'hint');\n                setFieldBlock(false);\n                break;\n            }\n            default:{\n                console.error(`Unexpected player type: '${gameMode.alias[curePlayer-1]}'`);\n                exitGame();\n            }\n        }\n    }\n\n    useEffect(getNextTurn, [curePlayer]);\n\n    const curePlayerString = ()=>{\n        if (gameMode.alias===undefined)\n            return \"¯\\\\_(ツ)_/¯\";\n        switch (gameMode.alias[curePlayer-1]){\n            case 'player': return `Игрок ${curePlayer}`;\n            case 'ai': return `ИИ №${curePlayer}`;\n            default: return \"¯\\\\_(ツ)_/¯\";\n        }\n    };\n\n    const ai = ()=>{\n        return AiTurn( gameField.field.map((arr)=>[...arr]), curePlayer, checkWin);\n    }\n\n    return (\n        <div className=\"GameRoot\">\n            {gonnaLeave?<Redirect to='/'/>:null}            \n            <Table columnAction={clickHandler} winner={winState.winner} \n                   currentPlayer={curePlayerString()} field={gameField.field}\n                   cellsToPulse={winState.cellsToPulse} gameState={gameState}\n                   exitGame={exitGame} isFieldBlocked={isFieldBlocked}\n                   restart={startGame} />\n        </div>\n    );\n}\n\nexport default TryToStartGame;\n","import React, { useState, useEffect } from 'react';\r\nimport {Redirect, Link} from 'react-router-dom';\r\n\r\nconst GameOver = (props)=>{\r\n    return (\r\n        <div>\r\n            {`Победил игрок ${props.location.winner}`}\r\n            {/*<Link to='/'>Начать сначала</Link>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameOver;","import React, { useState, useEffect } from 'react';\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport './room-unit.css';\r\n\r\nconst RoomUnit = ({roomInfo, userInfo, onRoomDelete, onRoomEnter})=>{\r\n    return(\r\n        <div className=\"roomUnit\" onClick={()=>onRoomEnter(roomInfo.id)}>\r\n            <div className=\"headerBlock\">\r\n                <div className=\"roomName\">\r\n                    {roomInfo.name}\r\n                </div>\r\n                <div className=\"statusRoot\">\r\n                    <div className=\"gameStatus\">\r\n                        {roomInfo.gameStatus}\r\n                    </div>\r\n                    <div className=\"countersRoot\">\r\n                        <div className=\"players\">\r\n                            <i className=\"fa fa-user\"></i> {roomInfo.players.length}/2\r\n                        </div>\r\n                        <div className=\"spectators\">\r\n                            <i className=\"fa fa-eye\"></i> {roomInfo.spectators.length}\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </div>\r\n            <div className=\"buttonsBlock\">\r\n                <div className=\"enterButtons\">\r\n                    <button id=\"spectator\" className=\"btn btn-outline-primary\" onClick={(e)=>{e.stopPropagation(); onRoomEnter(roomInfo.id, 'spectator')}}>Смотреть</button>\r\n                    <button id=\"join\" className=\"btn btn-success\" onClick={(e)=>{e.stopPropagation(); onRoomEnter(roomInfo.id)}}>Играть</button>\r\n                </div>\r\n                {roomInfo.creator===userInfo.id?\r\n                <div className=\"deleteButton\">\r\n                    <button id=\"delete\" className=\"btn btn-danger\" onClick={(e)=>{e.stopPropagation(); onRoomDelete(roomInfo.id)}}><i class=\"fa fa-trash-o\"></i></button>\r\n                </div>:null}\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\n{/* <div className=\"roomUnit\" >\r\n        {roomInfo.name} | {roomInfo.gameStatus}\r\n        <button onClick={()=>onRoomEnter(roomInfo.id)}>Join room</button>\r\n        {roomInfo.creator===userInfo.id?<button onClick={()=>onRoomDelete(roomInfo.id)}>Delete room</button>:null}\r\n    </div> */}\r\n\r\nexport default RoomUnit;","import React, { useState, useEffect } from 'react';\r\nimport './loader.css';\r\n\r\nconst Loader = ()=>{\r\n    return(\r\n        <div class=\"loader\">\r\n            <div className=\"dot\"></div>\r\n            <div className=\"dot\"></div>\r\n            <div className=\"dot\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, { useState, useEffect } from 'react';\nimport {Redirect} from 'react-router-dom';\nimport RoomUnit from '../room-unit/room-unit';\nimport Loader from '../loader/loader';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport './rooms-list.css';\nimport { userInfo } from 'os';\n\n\n// let roomList = [];\n// const setRoomList = (newArr)=>{\n//     roomList = newArr;\n// }\n\nconst RoomsList = ({onRoomEnter, socket, userInfo})=>{\n    console.log(socket);\n    //const [socket, setSocket] = useState(io('http://192.168.1.59:4001'));\n    const [roomList, setRoomList] = useState([]);\n    const [connectionState, setConnectionState] = useState('loading');\n    const [newRoomName, setNewRoomName] = useState('');\n\n    // const onRoomEnter = (roomInfo)=>{\n    //     console.log(roomInfo);\n    // }\n\n    const updRooms = (newRoomList)=>{\n        console.log('upd rooms', newRoomList);\n        newRoomList.reverse();\n        setConnectionState('done');\n        setRoomList(newRoomList);\n    }\n\n    useEffect(()=>{\n        socket.emit('get-rooms', {}, updRooms);\n\n        socket.on('connect-init', updRooms);\n\n        socket.on('rooms-list-updated', updRooms);\n\n        socket.on('connect', ()=>{console.log('connect'); socket.emit('get-rooms', {}, updRooms)});\n        socket.on('disconnect', ()=>{\n            console.log('disconnected...');\n            setConnectionState('loading');\n            setRoomList([]);\n        })\n\n        socket.on('connect_error', (error)=>{\n            console.log('connect_error', error);\n            setConnectionState('error');\n        })\n\n    },[]);\n\n    const updNewRoomName = (e)=>{\n        setNewRoomName(e.target.value);\n    }\n\n    const onRoomDelete = (id)=>{\n        socket.emit('delete-room', {roomId: id, initiator: userInfo.id});\n    }\n\n    const roomCreated = (err)=>{\n        if (err!==null){\n            return;\n        }\n        setNewRoomName('');\n    }\n\n    const postRoom = (e)=>{\n        e.preventDefault();\n        socket.emit('create-room', {roomName: newRoomName, creator: userInfo.id}, roomCreated);\n        \n    }\n\n    \n\n    return(\n        <div className=\"roomListRoot\">\n\n            <form className=\"newRoomForm\" onSubmit={postRoom}>\n                <input type=\"text\" onChange={updNewRoomName} placeholder=\"name of the room\" className=\"form-control\" value={newRoomName} /> \n                <button className=\"btn btn-outline-primary ml-2\" type='submit'>create room</button>\n            </form>\n            \n            <div className=\"roomsRoot\">\n                {connectionState=='done'?roomList.map(x=><RoomUnit key={x.id} roomInfo={x} userInfo={userInfo} \n                                                    onRoomEnter={onRoomEnter} onRoomDelete={onRoomDelete}/>):null}\n                {connectionState=='loading'?<Loader />:null}\n                {connectionState=='error'?<> <ErrorMessage text='Cant connect to the server. Trying to reconnect'/> <Loader /></>:null}\n            </div>\n            \n        </div>\n    );\n}\n\nconst ErrorMessage = ({text})=>{\n    const style={\n        textAlign: 'center',\n    }\n\n    return(\n        <div style={style}>{text}</div>\n    );\n}\n\nexport default RoomsList;\n","import React, { useState, useEffect } from 'react';\r\nimport {Link, Redirect} from 'react-router-dom';\r\nimport GameHeader from '../game-header/game-header.js';\r\nimport io from 'socket.io-client';\r\nimport RoomsList from '../rooms-list/rooms-list.js';\r\nimport './setup.css';\r\n\r\nconst socket = io(window.location.origin);\r\nconst generateId = ()=>Math.random().toString(36).substr(2, 9);\r\nconst localStorageUsernameKey = '4-in-a-row-username';\r\n\r\n\r\nconst Setup = (props)=>{\r\n\r\n    const RowsNumber = 7, ColumnNumber = 6;\r\n\r\n    const WinLen=4;\r\n\r\n    const [gameModes, setGameModes] = useState([\r\n        {id: 0, title: <span><i className=\"fa fa-user\"></i> vs <i className=\"fa fa-desktop\"></i></span>, alias: ['player', 'ai'], active: true},\r\n        {id: 1, title: <span><i className=\"fa fa-user\"></i> vs <i className=\"fa fa-user\"></i></span>, alias: ['player', 'player'], active: false},\r\n        {id: 2, title: <span><i className=\"fa fa-desktop\"></i> vs <i className=\"fa fa-desktop\"></i></span>, alias: ['ai', 'ai'], active: false},\r\n        /*{id: 3, title: <span>Мультиплеер</span>, alias: ['player', 'web'], active: false}*/\r\n    ]);\r\n    const [gameMode, setGameMode] = useState({});\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [roomInfo, setRoomInfo] = useState('');\r\n    const [userInfo, setUserInfo] = useLocalStorage({\r\n        id: generateId(),\r\n        name: `Player ${generateId()}`,\r\n    }, localStorageUsernameKey);\r\n\r\n    const newPlayerName = (val)=>{\r\n        setUserInfo({\r\n            ...userInfo,\r\n            name: val,\r\n        });\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const {id, alias} = gameModes.find((x)=>x.active);\r\n        setGameMode({id, alias});\r\n    }, [gameModes]);\r\n\r\n    const onGameModeChange = (id)=>{\r\n        setGameModes(gameModes.map((x)=>x.id===id?{...x, active: true}:{...x, active: false}));\r\n    }\r\n\r\n    const onRoomPicked = (x, role='player')=>{\r\n        console.log('room in on picked', x);\r\n        setGameMode({id: 'multiplayer', alias: ['player','web'], role});\r\n        setRoomInfo(x);\r\n        console.log('onRoomPicked', socket);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        console.log('trying to start game', roomInfo);\r\n        if (roomInfo!==''){\r\n            startGame();\r\n        }\r\n    }, [roomInfo]);\r\n\r\n    const startGame = ()=>{\r\n\r\n        setGameStarted(true);\r\n    }\r\n\r\n    const redirectToGame = ()=>{\r\n        return (\r\n            <Redirect to={{\r\n                pathname: '/game',\r\n                state: {\r\n                    fieldInfo:{\r\n                        RowsNumber,\r\n                        ColumnNumber,\r\n                        WinLen\r\n                    },\r\n                    gameInfo:{\r\n                        gameMode\r\n                    },\r\n                    user:{\r\n                        userName: userInfo.name\r\n                    },\r\n                    roomInfo,\r\n                    socket\r\n                }\r\n            }}/>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {gameStarted?redirectToGame():null}\r\n            <GameHeader gameModes={gameModes} onGameModeChange={onGameModeChange} \r\n                        onGameStart={startGame} userName={userInfo.name} \r\n                        onPlayerNameChange={newPlayerName} />\r\n            <div className=\"error\">\r\n                {props.location.state?props.location.state.errMsg:null}\r\n            </div>\r\n            {<RoomsList onRoomEnter={onRoomPicked} socket={socket} userInfo={userInfo}/>}\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst useLocalStorage = (initialValue, key)=>{\r\n\r\n    const [value, setValue] = useState(localStorage.getItem(key)===null?initialValue:JSON.parse(localStorage.getItem(key)));\r\n\r\n    const saveValue = (value)=>{\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n        setValue(value);\r\n    }\r\n\r\n    if (localStorage.getItem(key)===null){\r\n        saveValue(initialValue);\r\n    }\r\n\r\n    return [value, saveValue];\r\n}\r\n\r\nexport default Setup;","import React, {useEffect, useState} from 'react';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport Game from './components/game/game.js';\r\nimport GameOver from './components/game-over/game-over.js';\r\nimport Setup from './components/setup/setup.js';\r\nimport Multiplayer from './components/multiplayer/multiplayer';\r\nimport './App.css';\r\nimport GameHeader from './components/game-header/game-header.js';\r\n\r\nconst App = ()=>{\r\n\r\n    return (\r\n        <div className=\"appRoot\">\r\n            <HashRouter>\r\n                <Route path='/' exact component={Setup} />\r\n                <Route path='/game' exact component={Game} />\r\n                <Route path='/gameover' exact component={GameOver} /> \r\n                <Route path='/multiplayer' exact component={Multiplayer} />    \r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","const insertInColumn = (array, columnId, value)=>{\r\n    const pos = {x: columnId, y: getInsertPosition(array[columnId])};\r\n\r\n    return changeArrayElem(array, pos, value);\r\n}\r\n\r\nconst MultiEqual = (...values)=>{\r\n    for(let i=0; i<values.length; i++){\r\n        for(let j=i+1; j<values.length; j++){\r\n            if (values[i]!==values[j])\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nconst generateIndexes = (stat, start, end)=>{\r\n    const res = [];\r\n    for(let i=start; i<end; i++){\r\n        res.push([stat, i]);\r\n    }\r\n    return res;\r\n}\r\n\r\nconst getDiagonals = (x, y, direction, arr)=>{\r\n    const res = {\r\n        arr: [],\r\n        ind: [],\r\n        role: `${direction} diagonal`\r\n    }\r\n\r\n    switch (direction){\r\n        case 'left': direction=0; break;\r\n        case 'right': direction=1; break;\r\n        default: direction=-1;\r\n    }\r\n\r\n    const lowerBound = {\r\n        i: direction?0:Math.max(x-4, 0),\r\n        j: 0,\r\n    }\r\n\r\n    const upperBound = {\r\n        i: Math.min(x+4, arr.length),\r\n        j: Math.min(y+4, arr[0].length)\r\n    }\r\n\r\n    \r\n\r\n    let j=y;\r\n    for(let i=x; i>=lowerBound.i && i<upperBound.i && j<upperBound.j; direction?i++:i--, j++){\r\n        res.arr.push(arr[i][j]);\r\n        res.ind.push([i,j]);\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nconst checkWin = (src, winLen, justCheckWin=1)=>{\r\n    let draw=true;\r\n    const inRow = [];\r\n    for(let [i, arr] of src.entries()){\r\n        for(let [j, x] of arr.entries()){\r\n            if (x<=0)\r\n                draw=false;\r\n            const cellsToCheck = [\r\n                {arr: arr.slice(j, j+winLen), ind: generateIndexes(i, j, j+winLen), role: 'column'}, //столбцы\r\n                {arr: src.slice(i, i+winLen).map((arr)=>arr[j]), ind: generateIndexes(j, i, i+winLen).map((x)=>x.reverse()), role: 'row'}, //строки\r\n                getDiagonals(i,j, 'right', src),\r\n                getDiagonals(i,j, 'left', src)\r\n            ];\r\n\r\n            for(let values of cellsToCheck){\r\n                if (values.arr.findIndex((x)=>x<=0)===-1 && values.arr.length===winLen && MultiEqual(...values.arr)){\r\n                    inRow.push({\r\n                        isWin: true,\r\n                        winner: values.arr[0],\r\n                        indexes: values.ind\r\n                    });\r\n                    if (justCheckWin){\r\n                        return inRow[0];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (draw)\r\n        return {\r\n            isWin: 'draw',\r\n            winner: 0,\r\n            indexes: generateIndexes(0, 0, src.length).map((x)=>x.reverse())\r\n        };\r\n\r\n    if (justCheckWin)\r\n        return {\r\n            isWin: false\r\n        }\r\n    \r\n    return inRow;\r\n}\r\n\r\n// const updArr = (arr, colId)=>{\r\n//     arr = changeArrayElem(arr, {x: colId, y: getInsertPosition(arr[colId])}, curePlayer);\r\n//     return arr;\r\n// }\r\n\r\n// const eraseFromArr = (arr, val)=>{\r\n//     const ind = arr.findIndex(x=>x==val);\r\n//     if (ind>=0)\r\n//         players.splice(ind,1);\r\n// }\r\n\r\nconst norm = (x)=>{\r\n    return x<0?0:x;\r\n}\r\n\r\n\r\nconst getEmptyField = (N,M)=>{\r\n    return Array(M).fill(Array(N).fill(0));\r\n}\r\n\r\nconst getInsertPosition = (array)=>{\r\n    const ind = array.findIndex((a)=>a>0);\r\n    return (ind===-1?array.length:ind)-1;\r\n}\r\n\r\nconst changeArrayElem = (array, pos, value)=>{\r\n    return array.map((arr, i)=>{\r\n        return arr.map((x, j)=>{\r\n            return i===pos.x && j===pos.y?value:norm(x);\r\n        });\r\n    })\r\n}\r\n\r\nexport {checkWin, norm, getEmptyField, changeArrayElem, getInsertPosition, insertInColumn};\r\n","const {checkWin, getEmptyField, getInsertPosition, changeArrayElem} = require('../lib/stuff');\r\n\r\nconst initValue = {\r\n    field: getEmptyField(7,6)\r\n}\r\n\r\nclass Field{\r\n    constructor(){\r\n        this.field = initValue.field;\r\n    }\r\n\r\n    move(columnId, value){\r\n        console.log('cId', columnId);\r\n        const pos = {x: columnId, y: getInsertPosition(this.field[columnId] || [])};\r\n        this.field = changeArrayElem(this.field, pos, value);\r\n        return checkWin(this.field, 4);\r\n    }\r\n\r\n    getField(){\r\n        return this.field;\r\n    }\r\n\r\n    reset(){\r\n        this.field = initValue.field;\r\n    }\r\n}\r\n\r\nexport {Field};"],"sourceRoot":""}